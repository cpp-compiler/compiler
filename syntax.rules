number : 0|1|...|9...
ident : [a-z|A-Z]
expr : number/ident +/- ... ;

# var declaration
Type ident;
ident Type;

# assignment:
ident = expr

# declare and assign
ident := expr

# if
if expr {
	stmt 1
	stmt 2
	...
	stmt n
}

# else (requires previous if)
else expr {
	stmt 1
	stmt 2
	...
	stmt n
}

// func definition
[optional]

IDENT HASTYPE [IDENT IDENT, ...] OBRACE
	stmt
	...
CBRACE

// example
ident :: a int {
	a + = 1;
}


// struct definition
:: = HASTYPE
struct = KEYSTRUCT

IDENT HASTYPE KEYSTRUCT OBRACE
	stmt
	...
CBRACE

// example:
Foo :: struct {
	x int;
	y int;
}
